{
  "name": "expressjs-lambda-boilerplate",
  "version": "1.0.0",
  "description": "A boilerplate for ExpressJS applications that can be deployed to AWS Lambda",
  "main": "lambda.js",
  "config": {
    "s3BucketName": "expressjs-lambda-boilerplate",
    "region": "us-east-2",
    "cloudFormationStackName": "ServerlessExpressHttpApiStack",
    "functionName": "",
    "domain": "",
    "lambdaBaseUrl": "i50tl1d3ak.execute-api.us-east-2.amazonaws.com/v1"
  },
  "scripts": {
    "dev": "npm run swagger && nodemon --files --exec ts-node src/index.local",
    "swagger": "node ./swagger.js",
    "kill": "kill -9 $(lsof -ti:8080)",
    "clean-unimported": "npx unimported --fix",
    "build": "tsc",
    "postbuild": "cp package*json dist/ && cp src/swagger-spec*json dist/",
    "create-bucket": "cross-var aws s3 mb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-bucket": "cross-var aws s3 rb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-stack": "cross-var aws cloudformation delete-stack --stack-name $npm_package_config_cloudFormationStackName --region $npm_package_config_region",
    "develop": "nodemon --config nodemon.json",
    "invoke-lambda": "cross-var aws lambda invoke --function-name $npm_package_config_functionName --region $npm_package_config_region --cli-binary-format raw-in-base64-out --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "local": "ts-node scripts/local",
    "sam:build": "sam build --template ./sam-template.yaml",
    "sam:deploy": "cross-var sam deploy --stack-name $npm_package_config_cloudFormationStackName --capabilities CAPABILITY_IAM --s3-bucket $npm_package_config_s3BucketName --s3-prefix $npm_package_name --region $npm_package_config_region --no-fail-on-empty-changeset $(test -n \"$npm_package_config_domain\" && echo \"--parameter-overrides DomainName=$npm_package_config_domain\")",
    "package-deploy": "cross-env DEPLOY=true npm run swagger && npm run build && npm run sam:build && npm run sam:deploy",
    "setup": "npm install && (cross-var aws s3api get-bucket-location --bucket $npm_package_config_s3BucketName --region $npm_package_config_region || npm run create-bucket) && npm run package-deploy",
    "start": "cross-env DEBUG=http NODE_ENV=production ts-node src/index.local",
    "test": "cross-env NODE_ENV=test mocha",
    "test:watch": "npm test -- -- -w"
  },
  "license": "Apache-2.0",
  "dependencies": {
    "@clerk/clerk-sdk-node": "^4.13.12",
    "@codegenie/serverless-express": "^4.3.10",
    "aws-lambda": "^1.0.7",
    "compression": "^1.6.2",
    "cors": "^2.8.3",
    "ejs": "^3.1.6",
    "express": "^4.17.1",
    "request": "^2.88.2",
    "source-map-support": "^0.5.19",
    "swagger-autogen": "^2.23.7",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.0",
    "tslib": "^2.6.2",
    "winston": "^3.11.0"
  },
  "devDependencies": {
    "@types/aws-lambda": "^8.10.136",
    "@types/chai": "^4.2.21",
    "@types/compression": "^1.7.1",
    "@types/cors": "^2.8.12",
    "@types/ejs": "^3.1.0",
    "@types/express": "^4.17.13",
    "@types/helmet": "^4.0.0",
    "@types/mocha": "^9.0.0",
    "@types/node": "^20.10.0",
    "@types/request": "^2.48.12",
    "@types/supertest": "^2.0.11",
    "@types/swagger-ui-express": "^4.1.6",
    "artillery": "^2.0.8",
    "chai": "^4.3.4",
    "cross-env": "^7.0.3",
    "cross-var": "^1.1.0",
    "mocha": "^9.1.1",
    "nodemon": "^3.1.0",
    "rimraf": "^5.0.5",
    "supertest": "^6.1.6",
    "ts-node": "^10.9.2",
    "typescript": "^4.3.5"
  }
}
